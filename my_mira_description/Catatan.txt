1. Create package
    catkin_create_pkg my_mira_description rospy rviz controller_manager gazebo_ros joint_state_publisher robot_state_publisher
    
2. Create the following folders inside it:
    - launch
    - models
    - rviz_config
    - config
    - urdf
    - worlds

3. Go to touch folder and create mira_simple.urdf

4. The main elements to define in a joint are:
    Type:   there are these types: revolute, continuous, prismatic, fixed, floating, and planar.
            You can learn more here: http://wiki.ros.org/urdf/XML/joint The joint selection will 
            depend on how the physical model of your robot moves.
    Parent and Child: Here is where you set who is connected to your link.
    Origin: All of the coordinates and rpy are referenced to the Parent axis, not the child axis.
    Limit:  This is a very important element, especially when you have to control a robot movement.
    Axis:   Here you define around which Parent's AXIS the Child link will revolve.
            This, of course, depends on the type of joint; some of them don't have axis tags
            because they are irrelevant, such as the fixed joint.

5. roslaunch my_mira_description urdf_visualize.launch model:='$(find my_mira_description)/urdf/mira_simple.urdf'

6. You will have to add two elements in RVIZ:
    RobotModel: In this case, just select the robot_description variable for the RobotDescription field.
    TF        : Will turn green as soon as you select the correct fixed frame, in this case base_link.

7. As you can see, you have RVIZ, but also a window with a slider. This slider allows you to move the joints.
    It's the JointStatePublisher Gui. This is vital for checking if the joints are correctly set in the URDF.
    It also allows you to see if the given limits in the joints are the correct ones.
    If you can't see the "joint control" window, it must be behind the RVIZ window. Just move it around and,
    to avoid any further loss, right click on it and select in Layers-->Always On Top

8. You can also see the Link-Joint structure of any URDF file through the urdf_to_graphiz tool. Just execute the following:
    - roscd my_mira_description/urdf
    - urdf_to_graphiz mira_simple.urdf
        This tool generates the link and joint tree:
        Created file mira_simple.gv
        Created file mira_simple.pdf








---------------------------------------------------------------------------------------------------------------------------

Exercise U1-2
1. touch urdf/mira_geometric.urdf

---------------------------------------------------------------------------------------------------------------------------

How to IMPORT 3D CAD to GAZEBO
1. roscd mira_description
2. cp ./models/mira/meshes/mira_body_v3.dae /home/user/catkin_ws/src/ROS_URDF/
3. cp ./models/mira/meshes/mira_head_v5.dae /home/user/catkin_ws/src/ROS_URDF/
4. cp ./models/mira/meshes/mira_eye_v4.dae /home/user/catkin_ws/src/ROS_URDF/
5. roscd my_mira_description
6. cd models;mkdir mira;cd mira;mkdir meshes
7. cd /home/user/catkin_ws/src/ROS_URDF/;mv *.dae /home/user/catkin_ws/src/ROS_URDF/my_mira_description/models/mira/meshes/
8. touch urdf/mira_only_daes.urdf
9. roslaunch my_mira_description urdf_visualize.launch model:='$(find my_mira_description)/urdf/mira_only_daes.urdf'

---------------------------------------------------------------------------------------------------------------------------


To make a model appear in Gazebo you need to add the following:

Inertias: The inertias and mass of the model is important if you want it to have physics applied
Gazebo Physical Properties: Here you specify the frictions and material properties like colour or softness.
Collisions: Without collisions the Robot models would just go through the floor.
Visual Properties: We add colour to the visual, which only will affect the URDF in RVIZ, the colour in the simulation is defined in the Gazebo Physical Properties.
Gazebo Sensors: Here is when you add cameras, motor controllers and all the robots systems.

1. roscd my_mira_description
2. touch urdf/mira_simple_collisions_inertias.urdf

contoh inertia
<inertial>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <mass value="0.18" />
    <inertia ixx="0.0002835" ixy="0.0" ixz="0.0" iyy="0.0002835" iyz="0.0" izz="0.000324"/>
</inertial>

3. roscd my_mira_description
4. mkdir scripts
5. touch scripts/inertia_calculator.py
6. chmod +x scripts/inertia_calculator.py
7. rosrun my_mira_description inertia_calculator.py
8. roslaunch my_mira_description urdf_visualize.launch model:='$(find my_mira_description)/urdf/mira_simple_collisions_inertias.urdf'

-------------------------------------------------------------------------------------------------------------------------------------


1.4 Spawn into Simulation

Now its time to see your creation inside the simulated world!.
Now, how do you spawn a URDF file-defined robot into the simulated world?
Through these two launch files:
1. roscd my_mira_description
2. touch launch/spawn_urdf.launch

This second one's name is spawn_mira.launch:
3. roscd my_mira_description
4. touch launch/spawn_mira_simple_collisions_inertias.launch

5. roslaunch my_mira_description spawn_mira_simple_collisions_inertias.launch

How Delete a robot model from Gazebo
6. rosservice call /gazebo/get_world_properties "{}"
7. rosservice call /gazebo/delete_model "model_name: 'mira'"

Or you can make your life easier by creating a client that removes the model:
8. roscd my_mira_description
9. touch scripts/delete_mira.py
10. chmod +x scripts/delete_mira.py
11. rosrun my_mira_description delete_mira.py

--------------------------------------------------------------------------------------------

Exercise U2-1 (SKIP dulu ya)
